
// (c) 2024 Kazuki KOHZUKI

namespace TAFitting.ModelGenerator;

[Generator]
internal sealed class ExponentialGenerator : ModelGeneratorBase
{
    private static readonly Dictionary<int, string> guids = new()
    {
        { 1, "5C8EAF4E-C682-4524-BE0B-B0A1970E461B" },
        { 2, "08A2DDE9-FB2E-49FF-AC53-D78275CE7022" },
        { 3, "AD397D83-B21F-4861-BFF9-0AEC16FE0AF8" },
        { 4, "E02DAD2A-9DC9-4315-AACA-F62DEB9681A7" },
    };

    protected override Dictionary<int, string> Guids
        => guids;

    override protected string GetClassName(int n)
        => $"Exponential{n}";

    override protected string Generate(int n, string guid)
    {
        var builder = new StringBuilder();

        builder.AppendLine("// <auto-generated/>");
        builder.AppendLine();
        builder.AppendLine("using System.Runtime.InteropServices;");
        builder.AppendLine();
        builder.AppendLine("namespace TAFitting.Model.Exponential;");
        builder.AppendLine();

        builder.AppendLine($"/// <summary>");
        builder.AppendLine($"/// Represents a {n}-component exponential model.");
        builder.AppendLine($"/// </summary>");
        builder.AppendLine($"[Guid(\"{guid}\")]");
        builder.AppendLine($"internal sealed class Exponential{n} : IFittingModel, IAnalyticallyDifferentiable");
        builder.AppendLine("{");

        #region fields

        builder.AppendLine("\tprivate static readonly Parameter[] parameters = [");
        builder.AppendLine("\t\tnew() { Name = \"A0\", IsMagnitude = true },");
        for (var i = 1; i <= n; i++)
        {
            builder.AppendLine($"\t\tnew() {{ Name = \"A{i}\", InitialValue = 1e{3 - i}, IsMagnitude = true }},");
            builder.AppendLine($"\t\tnew() {{ Name = \"T{i}\", InitialValue = 5e{i - 1}, Constraints = ParameterConstraints.Positive }},");
        }
        builder.AppendLine("\t];");

        #endregion fields

        #region properties

        builder.AppendLine();
        builder.AppendLine("\t/// <inheritdoc/>");
        builder.AppendLine("\tpublic string Name => \"Exp" + n + "\";");

        builder.AppendLine();
        builder.AppendLine("\t/// <inheritdoc/>");
        builder.AppendLine("\tpublic string Description => \"" + n + "-component exponential model\";");

        builder.AppendLine();
        builder.AppendLine("\t/// <inheritdoc/>");
        builder.AppendLine(
            "\tpublic string ExcelFormula => \"[A0]"
            + string.Concat(Enumerable.Range(1, n).Select(i => $" + [A{i}] * EXP(-$X / [T{i}])")) + "\";"
        );

        builder.AppendLine();
        builder.AppendLine("\t/// <inheritdoc/>");
        builder.AppendLine("\tpublic IReadOnlyList<Parameter> Parameters => parameters;");

        builder.AppendLine();
        builder.AppendLine("\t/// <inheritdoc/>");
        builder.AppendLine("\tpublic bool XLogScale => false;");

        builder.AppendLine();
        builder.AppendLine("\t/// <inheritdoc/>");
        builder.AppendLine("\tpublic bool YLogScale => true;");

        #endregion properties

        #region methods

        #region GetFunction

        builder.AppendLine();
        builder.AppendLine("\t/// <inheritdoc/>");
        builder.AppendLine("\tpublic Func<double, double> GetFunction(IReadOnlyList<double> parameters)");
        builder.AppendLine("\t{");
        builder.AppendLine("\t\tvar a0 = parameters[0];");
        for (var i = 1; i <= n; i++)
        {
            builder.AppendLine($"\t\tvar a{i} = parameters[{2 * i - 1}];");
            builder.AppendLine($"\t\tvar t{i} = parameters[{2 * i}];");
        }
        builder.AppendLine();
        builder.AppendLine("\t\treturn x => a0"
            + string.Concat(Enumerable.Range(1, n).Select(i => $" + a{i} * Math.Exp(-x / t{i})")) + ";");
        builder.AppendLine("} // public Func<double, double> GetFunction(IReadOnlyList<double> parameters)");

        #endregion GetFunction

        #region ComputeDifferentials

        builder.AppendLine();
        builder.AppendLine("\t/// <inheritdoc/>");
        builder.AppendLine("\tpublic double[] ComputeDifferentials(IReadOnlyList<double> parameters, double x)");
        builder.AppendLine("\t{");
        for (var i = 1; i <= n; i++)
        {
            builder.AppendLine($"\t\tvar a{i} = parameters[{2 * i - 1}];");
            builder.AppendLine($"\t\tvar t{i} = parameters[{2 * i}];");
        }
        builder.AppendLine();

        for (var i = 1; i <= n; i++)
        {
            builder.AppendLine($"\t\tvar exp{i} = Math.Exp(-x / t{i});");
        }
        builder.AppendLine();
        builder.AppendLine("\t\tvar d_a0 = 1.0;");
        for (var i = 1; i <= n; i++)
        {
            builder.AppendLine($"\t\tvar d_a{i} = exp{i};");
            builder.AppendLine($"\t\tvar d_t{i} = a{i} * x * exp{i} / (t{i} * t{i});");
        }
        builder.Append("\t\treturn [d_a0, ");
        builder.Append(string.Join(", ", Enumerable.Range(1, n).Select(i => $"d_a{i}, d_t{i}")));
        builder.AppendLine("];");
        builder.AppendLine("\t} // public double[] ComputeDifferentials(IReadOnlyList<double> parameters, double x)");

        #endregion ComputeDifferentials

        #endregion methods

        builder.AppendLine($"}} // internal sealed class Exponential{n} : IFittingModel, IAnalyticallyDifferentiable");

        return builder.ToString();
    } // override protected string Generate (int, string)
} // internal sealed class ExponentialGenerator : ISourceGenerator
