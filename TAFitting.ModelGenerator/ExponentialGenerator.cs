
// (c) 2024 Kazuki KOHZUKI

namespace TAFitting.ModelGenerator;

[Generator(LanguageNames.CSharp)]
internal sealed class ExponentialGenerator : ModelGeneratorBase
{
    override protected string AttributeName => AttributesGenerator.ExponentialModelName;

    override protected string Generate(string nameSpace, string className, int n)
    {
        var builder = new StringBuilder();

        builder.AppendLine("// <auto-generated/>");
        builder.AppendLine();
        builder.AppendLine("using System.Runtime.InteropServices;");
        if (!string.IsNullOrEmpty(nameSpace))
        {
            builder.AppendLine();
            builder.AppendLine($"namespace {nameSpace};");
        }

        builder.AppendLine();
        builder.AppendLine($"/// <summary>");
        builder.AppendLine($"/// Represents a {n}-component exponential model.");
        builder.AppendLine($"/// </summary>");
        builder.AppendLine($"internal partial class {className} : IFittingModel, IAnalyticallyDifferentiable");
        builder.AppendLine("{");

        #region fields

        builder.AppendLine("\tprivate static readonly Parameter[] parameters = [");
        builder.AppendLine("\t\tnew() { Name = \"A0\", IsMagnitude = true },");
        for (var i = 1; i <= n; i++)
        {
            builder.AppendLine($"\t\tnew() {{ Name = \"A{i}\", InitialValue = 1e{3 - i}, IsMagnitude = true }},");
            builder.AppendLine($"\t\tnew() {{ Name = \"T{i}\", InitialValue = 5e{i - 1}, Constraints = ParameterConstraints.Positive }},");
        }
        builder.AppendLine("\t];");

        #endregion fields

        #region properties

        builder.AppendLine();
        builder.AppendLine("\t/// <inheritdoc/>");
        builder.AppendLine("\tpublic string Description => \"" + n + "-component exponential model\";");

        builder.AppendLine();
        builder.AppendLine("\t/// <inheritdoc/>");
        builder.AppendLine(
            "\tpublic string ExcelFormula => \"[A0]"
            + string.Concat(Enumerable.Range(1, n).Select(i => $" + [A{i}] * EXP(-$X / [T{i}])")) + "\";"
        );

        builder.AppendLine();
        builder.AppendLine("\t/// <inheritdoc/>");
        builder.AppendLine("\tpublic IReadOnlyList<Parameter> Parameters => parameters;");

        builder.AppendLine();
        builder.AppendLine("\t/// <inheritdoc/>");
        builder.AppendLine("\tpublic bool XLogScale => false;");

        builder.AppendLine();
        builder.AppendLine("\t/// <inheritdoc/>");
        builder.AppendLine("\tpublic bool YLogScale => true;");

        #endregion properties

        #region methods

        #region GetFunction

        builder.AppendLine();
        builder.AppendLine("\t/// <inheritdoc/>");
        builder.AppendLine("\tpublic Func<double, double> GetFunction(IReadOnlyList<double> parameters)");
        builder.AppendLine("\t{");
        builder.AppendLine("\t\tvar a0 = parameters[0];");
        for (var i = 1; i <= n; i++)
        {
            builder.AppendLine($"\t\tvar a{i} = parameters[{2 * i - 1}];");
            builder.AppendLine($"\t\tvar t{i} = parameters[{2 * i}];");
        }
        builder.AppendLine();
        builder.AppendLine("\t\treturn x => a0"
            + string.Concat(Enumerable.Range(1, n).Select(i => $" + a{i} * Math.Exp(-x / t{i})")) + ";");
        builder.AppendLine("} // public Func<double, double> GetFunction(IReadOnlyList<double> parameters)");

        #endregion GetFunction

        #region GetDerivatives

        builder.AppendLine();
        builder.AppendLine("\t/// <inheritdoc/>");
        builder.AppendLine("\tpublic Func<double, double[]> GetDerivatives(IReadOnlyList<double> parameters)");
        builder.AppendLine("\t{");
        for (var i = 1; i <= n; i++)
        {
            builder.AppendLine($"\t\tvar a{i} = parameters[{2 * i - 1}];");
            builder.AppendLine($"\t\tvar t{i} = parameters[{2 * i}];");
        }
        builder.AppendLine();

        builder.AppendLine("\t\treturn (x) =>");
        builder.AppendLine("\t\t{");
        for (var i = 1; i <= n; i++)
        {
            builder.AppendLine($"\t\t\tvar exp{i} = Math.Exp(-x / t{i});");
        }
        builder.AppendLine();
        builder.AppendLine("\t\t\tvar d_a0 = 1.0;");
        for (var i = 1; i <= n; i++)
        {
            builder.AppendLine($"\t\t\tvar d_a{i} = exp{i};");
            builder.AppendLine($"\t\t\tvar d_t{i} = a{i} * x * exp{i} / (t{i} * t{i});");
        }
        builder.Append("\t\t\treturn [d_a0, ");
        builder.Append(string.Join(", ", Enumerable.Range(1, n).Select(i => $"d_a{i}, d_t{i}")));
        builder.AppendLine("];");
        builder.AppendLine("\t\t};");
        builder.AppendLine("\t} // public Func<double, double[]> GetDerivatives (IReadOnlyList<double>)");

        #endregion GetDerivatives

        #endregion methods

        builder.AppendLine($"}} // internal partial class {className} : IFittingModel, IAnalyticallyDifferentiable");

        return builder.ToString();
    } // override protected string Generate (string, string, int)
} // internal sealed class ExponentialGenerator : ISourceGenerator
