
// (c) 2024 Kazuki Kohzuki

namespace TAFitting.IntrinsicsGenerator.Generators;

[Generator(LanguageNames.CSharp)]
internal sealed class IIntrinsicVectorInterfaceGenerator : ISourceGenerator
{
    internal const string InterfaceName = "IIntrinsicVector";

    public void Initialize(GeneratorInitializationContext context) { }

    public void Execute(GeneratorExecutionContext context)
    {
        context.AddSource($"{InterfaceName}.g.cs", InterfaceSource);
    } // public void Execute (GeneratorExecutionContext)


    private const string InterfaceSource = @"// <auto-generated/>

using System.Numerics;
using System.Runtime.Intrinsics;

#nullable enable

namespace TAFitting.Data;

/// <summary>
/// An AVX vector.
/// </summary>
internal interface IIntrinsicVector<TSelf>
    : IAdditionOperators<TSelf,TSelf,TSelf>, ISubtractionOperators<TSelf,TSelf,TSelf>, IMultiplyOperators<TSelf,TSelf,TSelf>, IDivisionOperators<TSelf,TSelf,TSelf>
    where TSelf : IIntrinsicVector<TSelf>
{
    /// <summary>
    /// Gets the sum of the elements.
    /// </summary>
    double Sum { get; }

    /// <summary>
    /// Loads the specified values.
    /// </summary>
    /// <param name=""values"">The values.</param>
    abstract void Load(double[] values);

    /// <summary>
    /// Creates a new instance of the <see cref=""IIntrinsicVector{TSelf}""/> class
    /// with the specified values.
    /// </summary>
    /// <param name=""values"">The values.</param>
    /// <returns>A new instance of the <see cref=""IIntrinsicVector{TSelf}""/> class with the <paramref name=""values""/>.</returns>
    abstract static TSelf Create(double[] values);

    /// <summary>
    /// Creates a new instance of the <see cref=""IIntrinsicVector{TSelf}""/> class
    /// with the specified length.
    /// </summary>
    /// <param name=""length"">The length.</param>
    /// <returns>A new instance of the <see cref=""IIntrinsicVector{TSelf}""/> class with the <paramref name=""length""/>.</returns>
    abstract static TSelf Create(int length);

    /// <summary>
    /// Gets the capacity.
    /// </summary>
    /// <returns>The capacity.</returns>
    abstract static int GetCapacity();

    /// <summary>
    /// Gets a value indicating whether the current hardware supports AVX.
    /// </summary>
    /// <returns><see langword=""true""/> if the current hardware supports AVX; otherwise, <see langword=""false""/>.</returns>
    abstract static bool CheckSupported();

    /// <summary>
    /// Adds two vectors and stores the result in the specified vector.
    /// </summary>
    /// <param name=""left"">The left vector.</param>
    /// <param name=""right"">The right vector.</param>
    /// <param name=""result"">The result vector.</param>
    abstract static void Add(TSelf left, TSelf right, TSelf result);

    /// <summary>
    /// Adds a vector and a scalar and stores the result in the specified vector.
    /// </summary>
    /// <param name=""left"">The left vector.</param>
    /// <param name=""right"">The right scalar.</param>
    /// <param name=""result"">The result vector.</param>
    abstract static void Subtract(TSelf left, TSelf right, TSelf result);

    /// <summary>
    /// Multiplies two vectors and stores the result in the specified vector.
    /// </summary>
    /// <param name=""left"">The left vector.</param>
    /// <param name=""right"">The right vector.</param>
    /// <param name=""result"">The result vector.</param>
    abstract static void Multiply(TSelf left, TSelf right, TSelf result);

    /// <summary>
    /// Divides two vectors and stores the result in the specified vector.
    /// </summary>
    /// <param name=""left"">The left vector.</param>
    /// <param name=""right"">The right vector.</param>
    /// <param name=""result"">The result vector.</param>
    abstract static void Divide(TSelf left, TSelf right, TSelf result);

    /// <summary>
    /// Computes the inner product of two vectors.
    /// </summary>
    /// <param name=""left"">The left vector.</param>
    /// <param name=""right"">The right vector.</param>
    /// <returns>The inner product of the two vectors.</returns>
    abstract static double InnerProduct(TSelf left, TSelf right);
} // internal interface IIntrinsicVector<TSelf>
";
} // internal sealed class IIntrinsicVectorInterfaceGenerator : ISourceGenerator
