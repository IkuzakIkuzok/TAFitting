
/*
 * Generated by JsonTemplateMaker
 *
 * The effect of the JsonTemplateMaker license does not extend to this code,
 * which is a deliverable of JsonTemplateMaker. Therefore, no JsonTemplateMaker
 * license is required to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell this generated code.
 */

using System.Text.Json;
using System.Text.Json.Serialization;

namespace TAFitting.Sync;

/// <summary>
/// Represents MessageObject.
/// </summary>
public sealed class MessageObject
{
    /// <summary>
    /// Gets or sets the type.
    /// </summary>
    [JsonPropertyName("type")]
    public string? Type { get; set; }

    /// <summary>
    /// Gets or sets the content.
    /// </summary>
    [JsonPropertyName("content")]
    public string? Content { get; set; }

    /// <summary>
    /// Initializes a new instance of the <see cref="MessageObject"/> class.
    /// </summary>
    public MessageObject() { }

    /// <summary>
    /// Creates a new instance of the <see cref="MessageObject"/> class from the JSON text.
    /// </summary>
    /// <param name="json">JSON text to parse.</param>
    /// <param name="options">Options to control the behavior during parsing.</param>
    /// <returns>A <see cref="MessageObject"/> instance representing the JSON value.</returns>
    /// <exception cref="System.ArgumentNullException">
    /// <paramref name="json"/> is <see langword="null"/>.
    /// </exception>
    /// <exception cref="JsonException">
    /// The JSON is invalid.
    ///
    /// -or-
    ///
    /// There is remaining data in the string beyond a single JSON value.
    /// </exception>
    public static MessageObject? LoadJson(string json, JsonSerializerOptions? options = default)
        => JsonSerializer.Deserialize<MessageObject>(json, options);

    /// <summary>
    /// Creates a new instance of the <see cref="MessageObject"/> class from the UTF-8 encoded text representing a single JSON value.
    /// </summary>
    /// <param name="utf8Json">JSON data to parse.</param>
    /// <param name="options">Options to control the behavior during reading.</param>
    /// <returns>A <see cref="MessageObject"/> instance representing the JSON value.</returns>
    /// <exception cref="System.ArgumentNullException">
    /// <paramref name="utf8Json"/> is <see langword="null"/>.
    /// </exception>
    /// <exception cref="JsonException">
    /// The JSON is invalid, or there is remaining data in the Stream.
    /// </exception>
    public static MessageObject? LoadJson(System.IO.Stream utf8Json, JsonSerializerOptions? options = default)
        => JsonSerializer.Deserialize<MessageObject>(utf8Json, options);

    /// <summary>
    /// Creates a new instance of the <see cref="MessageObject"/> class from the JSON text.
    /// </summary>
    /// <param name="json">JSON text to parse.</param>
    /// <param name="options">Options to control the behavior during parsing.</param>
    /// <returns>A <see cref="MessageObject"/> instance representing the JSON value.</returns>
    /// <exception cref="System.ArgumentNullException">
    /// <paramref name="json"/> is <see langword="null"/>.
    /// </exception>
    /// <exception cref="JsonException">
    /// The JSON is invalid.
    ///
    /// -or-
    ///
    /// There is remaining data in the string beyond a single JSON value.
    /// </exception>
    public static MessageObject? LoadJson(ReadOnlySpan<char> json, JsonSerializerOptions? options = default)
        => JsonSerializer.Deserialize<MessageObject>(json, options);

    /// <summary>
    /// Creates a new instance of the <see cref="MessageObject"/> class from the UTF-8 encoded text representing a single JSON value.
    /// </summary>
    /// <param name="utf8Json">JSON data to parse.</param>
    /// <param name="options">Options to control the behavior during reading.</param>
    /// <returns>A <see cref="MessageObject"/> instance representing the JSON value.</returns>
    /// <exception cref="System.ArgumentNullException">
    /// <paramref name="utf8Json"/> is <see langword="null"/>.
    /// </exception>
    /// <exception cref="JsonException">
    /// The JSON is invalid, or there is remaining data in the Stream.
    /// </exception>
    public static MessageObject? LoadJson(ReadOnlySpan<byte> utf8Json, JsonSerializerOptions? options = default)
        => JsonSerializer.Deserialize<MessageObject>(utf8Json, options);

    /// <inheritdoc/>
    public override string ToString()
        => JsonSerializer.Serialize(this);

    /// <summary>
    /// Converts the current instance to UTF-8 encoded JSON text and write it to the <see cref="System.IO.Stream"/>.
    /// </summary>
    /// <param name="utf8Json">The UTF-8 <see cref="System.IO.Stream"/> to write to.</param>
    /// <param name="options">Options to control the conversion behavior.</param>
    /// <exception cref="System.ArgumentNullException">
    /// <paramref name="utf8Json"/> is <see langword="null"/>.
    /// </exception>
    public void Serialize(Stream utf8Json, JsonSerializerOptions? options = default)
        => JsonSerializer.Serialize(utf8Json, this, options);
} // end of class MessageObject
